const { Telegraf } = require('telegraf');
const config = require('./config');
const db = require('./database');
const api = require('./api');
const keyboards = require('./keyboards');
const monitoring = require('./monitoring');
//const { message } = require('telegraf/filters');

const bot = new Telegraf(config.TELEGRAM_TOKEN);

// async function checkNewOrders(userId, sessionId) {
//     try {
//         const currentDate = new Date().toLocaleDateString('ru-RU');
//         const response = await api.getRoutes(sessionId, currentDate);
        
//         if (!response?.TL_Mobile_EnumRoutesResponse?.Routes) return;

//         const currentOrders = new Set(
//             response.TL_Mobile_EnumRoutesResponse.Routes
//                 .flatMap(route => route.Orders?.map(order => order.ExternalId) || [])
//         );

//         // –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç –∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
//         if (currentOrders.size === 0 && !monitoring.getLastKnownOrders(userId).size) {
//             await bot.telegram.sendMessage(userId, `üì≠ –ù–∞ ${currentDate} –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç`);
//             return;
//         }

//         const previousOrders = monitoring.getLastKnownOrders(userId);
//         const newOrders = [...currentOrders].filter(order => !previousOrders.has(order));

//         if (newOrders.length) {
//             await bot.telegram.sendMessage(
//                 userId, 
//                 `üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:\n${newOrders.map(order => `üì¶ ${order}`).join('\n')}`
//             );
//         }

//         monitoring.updateLastKnownOrders(userId, currentOrders);
//     } catch (error) {
//         console.error('Error checking orders:', error);
//     }
// }

async function checkNewOrders(userId, sessionId) {
    try {
        const currentDate = new Date().toLocaleDateString('ru-RU');
        const response = await api.getRoutes(sessionId, currentDate);
        
        if (!response?.TL_Mobile_EnumRoutesResponse?.Routes) return;

        const routes = response.TL_Mobile_EnumRoutesResponse.Routes;
        const currentOrders = new Set(
            routes.flatMap(route => route.Orders?.map(order => order.ExternalId) || [])
        );

        // –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç –∏ —ç—Ç–æ –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (currentOrders.size === 0 && !monitoring.getLastKnownOrders(userId).size) {
            await bot.telegram.sendMessage(userId, `üì≠ –ù–∞ ${currentDate} –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç`);
            return;
        }

        const previousOrders = monitoring.getLastKnownOrders(userId);
        const newOrders = [...currentOrders].filter(order => !previousOrders.has(order));

        if (newOrders.length) {
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö —Å –Ω–æ–≤—ã–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
            for (const route of routes) {
                const routeOrders = route.Orders?.map(order => order.ExternalId) || [];
                const hasNewOrders = routeOrders.some(orderId => newOrders.includes(orderId));

                if (hasNewOrders) {
                    const detailsResponse = await api.getRouteDetails(sessionId, [route.Id]);
                    const routeDetails = detailsResponse.TL_Mobile_GetRoutesResponse.Routes[0];

                    let messageText = `üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –≤ –º–∞—Ä—à—Ä—É—Ç–µ ${routeDetails.Number}:\n\n`;

                    // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–æ—á–∫—É –∑–∞–≥—Ä—É–∑–∫–∏)
                    for (let i = 1; i < routeDetails.Points.length; i++) {
                        const point = routeDetails.Points[i];
                        const pointOrder = point.Orders?.[0];

                        if (pointOrder && newOrders.includes(pointOrder.ExternalId)) {
                            messageText += `üì¶ –ó–∞–∫–∞–∑: ${pointOrder.ExternalId}\n`;
                            messageText += `üìç –ê–¥—Ä–µ—Å: ${point.Address}\n`;
                            if (point.Description) {
                                messageText += `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${point.Description}\n`;
                            }
                            if (point.Weight) {
                                messageText += `‚öñÔ∏è –í–µ—Å: ${point.Weight} ${routeDetails.WeightUnit}\n`;
                            }
                            if (point.ArrivalTime) {
                                const arrivalTime = new Date(point.ArrivalTime).toLocaleTimeString('ru-RU', {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                });
                                messageText += `üïí –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ${arrivalTime}\n`;
                            }
                            messageText += `\n`;
                        }
                    }

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö –≤ –º–∞—Ä—à—Ä—É—Ç–µ
                    await bot.telegram.sendMessage(userId, messageText);
                }
            }
        }

        monitoring.updateLastKnownOrders(userId, currentOrders);
    } catch (error) {
        console.error('Error checking orders:', error);
    }
}

async function showRoutes(ctx, date) {
    try {
        const session = await db.getSession(ctx.from.id);
        if (!session?.session_id) {
            return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
        }

        const response = await api.getRoutes(session.session_id, date);

        if (!response?.TL_Mobile_EnumRoutesResponse?.Routes) {
            return await ctx.reply(`üì≠ –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ ${date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`, 
                keyboards.getMainKeyboard(monitoring.isMonitoringActive(ctx.from.id)));
        }

        const routes = response.TL_Mobile_EnumRoutesResponse.Routes;
        const totalOrders = routes.reduce((sum, route) => sum + (route.Orders?.length || 0), 0);

        if (totalOrders === 0) {
            return await ctx.reply(`üì≠ –ù–∞ ${date} –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç`, 
                keyboards.getMainKeyboard(monitoring.isMonitoringActive(ctx.from.id)));
        }

        // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–∂–¥–æ–º –º–∞—Ä—à—Ä—É—Ç–µ
        for (const route of routes) {
            const detailsResponse = await api.getRouteDetails(session.session_id, [route.Id]);
            const routeDetails = detailsResponse.TL_Mobile_GetRoutesResponse.Routes[0];

            let messageText = `üöö –ú–∞—Ä—à—Ä—É—Ç ${routes.indexOf(route) + 1}\n`;
            messageText += `üìù –ù–æ–º–µ—Ä: ${routeDetails.Number}\n`;
            messageText += `üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${routeDetails.Points.length - 1}\n\n`; // -1 because first point is usually loading point

            // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Ç–æ—á–∫—É –∑–∞–≥—Ä—É–∑–∫–∏)
            for (let i = 1; i < routeDetails.Points.length; i++) {
                const point = routeDetails.Points[i];
                messageText += `üìç –¢–æ—á–∫–∞ ${point.Label}:\n`;
                messageText += `üì¶ C—Ç–∞—Ç—É—Å: ${point.Action}\n`;
                messageText += `üìÆ –ê–¥—Ä–µ—Å: ${point.Address}\n`;
                if (point.Description) {
                    messageText += `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${point.Description}\n`;
                }
                if (point.Orders && point.Orders.length > 0) {
                    messageText += `üîπ –ó–∞–∫–∞–∑: ${point.Orders[0].ExternalId}\n`;
                    messageText += `‚öñÔ∏è –í–µ—Å: ${point.Weight} ${routeDetails.WeightUnit}\n`;
                }
                if (point.ArrivalTime) {
                    const arrivalTime = new Date(point.ArrivalTime).toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit'
                    });
                    messageText += point.Action === 'drop' ? `üïí –î–æ—Å—Ç–∞–≤–∏–ª: ${arrivalTime}\n` : `üïí –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ${arrivalTime}\n`;
                }
                messageText += `\n`;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ä—à—Ä—É—Ç–µ
            if (messageText.length > config.MAX_MESSAGE_LENGTH) {
                // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
                for (let i = 0; i < messageText.length; i += config.MAX_MESSAGE_LENGTH) {
                    await ctx.reply(messageText.slice(i, i + config.MAX_MESSAGE_LENGTH));
                }
            } else {
                await ctx.reply(messageText);
            }
        }

        const statsMessage = `üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n–í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${routes.length}\n–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}`;

        await ctx.reply(statsMessage, 
            keyboards.getMainKeyboard(monitoring.isMonitoringActive(ctx.from.id)));

    } catch (error) {
        console.error('Error showing routes:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤');
    }
}

function calculateWorkHours(timeRange) {
    const [start, end] = timeRange.split('-');
    const [startHours, startMinutes] = start.split('.').map(Number);
    const [endHours, endMinutes] = end.split('.').map(Number);
    
    let hours = endHours - startHours;
    let minutes = endMinutes - startMinutes;
    
    if (minutes < 0) {
        hours--;
        minutes += 60;
    }
    
    return hours + (minutes / 60);
}

function getDriverSurname(driverName) {
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –≤—Å–µ–≥–¥–∞ –≤ –∫–æ–Ω—Ü–µ –∏ –æ—Ç–¥–µ–ª–µ–Ω –ø—Ä–æ–±–µ–ª–æ–º
    return driverName.split(' ')[0];
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command('start', async (ctx) => {
    const session = await db.getSession(ctx.from.id);
    const isMonitoringActive = monitoring.isMonitoringActive(ctx.from.id);

    if (session?.session_id) {
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboards.getMainKeyboard(isMonitoringActive));
    } else {
        await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:', 
            keyboards.getLoginKeyboard);
    }
});

bot.command('login', async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ ClientCode:');
    await db.saveSession(ctx.from.id, {
        user_id: ctx.from.id,
        client_code: null,
        login: null,
        password: null,
        session_id: null,
        driver_name: null,
        step: config.STEPS.CLIENT_CODE
    });
});

bot.command('status', async (ctx) => {
    const session = await db.getSession(ctx.from.id);
    const isMonitoringActive = monitoring.isMonitoringActive(ctx.from.id);

    if (!session?.session_id) {
        return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
    }

    const statusMessage = `–°—Ç–∞—Ç—É—Å: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n` +
        `–ö–ª–∏–µ–Ω—Ç: ${session.client_code}\n` +
        `–õ–æ–≥–∏–Ω: ${session.login}\n` +
        `–í–æ–¥–∏—Ç–µ–ª—å: ${session.driver_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${isMonitoringActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}`;

    await ctx.reply(statusMessage, keyboards.getMainKeyboard(isMonitoringActive));
});

bot.command('logout', async (ctx) => {
    const userId = ctx.from.id;
    const session = await db.getSession(userId);
    
    if (session) {
        monitoring.stopMonitoring(userId);
        await db.deleteSession(userId);
        await ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', keyboards.getLoginKeyboard);
    } else {
        await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
bot.action('routes_today', async (ctx) => {
    const currentDate = new Date().toLocaleDateString('ru-RU');
    await showRoutes(ctx, currentDate);
});

bot.action('routes_select_date', async (ctx) => {
    const session = await db.getSession(ctx.from.id);
    if (!session?.session_id) {
        return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
    }

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.02.2024):', 
        keyboards.getMainKeyboard(monitoring.isMonitoringActive(ctx.from.id)));
    
    await db.saveSession(ctx.from.id, {
        ...session,
        step: config.STEPS.AWAITING_DATE
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    const text = ctx.message.text;
    const userId = ctx.from.id;
    const session = await db.getSession(userId);
    const isMonitoringActive = monitoring.isMonitoringActive(userId);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    switch (text) {
        case 'üîë –í–æ–π—Ç–∏':
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ ClientCode:');
            await db.saveSession(userId, {
                user_id: userId,
                client_code: null,
                login: null,
                password: null,
                session_id: null,
                driver_name: null,
                step: config.STEPS.CLIENT_CODE
            });
            return;

        case 'üìä –ú–∞—Ä—à—Ä—É—Ç—ã':
            if (!session?.session_id) {
                return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
            }
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤:', keyboards.getRoutesKeyboard);
            return;

        case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
            const statusSession = await db.getSession(ctx.from.id);
            const statusMonitoringActive = monitoring.isMonitoringActive(ctx.from.id);
        
            if (!statusSession?.session_id) {
                return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
            }
        
            const statusMessage = `–°—Ç–∞—Ç—É—Å: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n` +
                `–ö–ª–∏–µ–Ω—Ç: ${statusSession.client_code}\n` +
                `–õ–æ–≥–∏–Ω: ${statusSession.login}\n` +
                `–í–æ–¥–∏—Ç–µ–ª—å: ${statusSession.driver_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${statusMonitoringActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}`;
        
            await ctx.reply(statusMessage, keyboards.getMainKeyboard(statusMonitoringActive));
            return;

        case 'üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥':
            if (!session?.session_id) {
                return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
            }
            if (isMonitoringActive) {
                return await ctx.reply('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!', 
                    keyboards.getMainKeyboard(true));
            }
            const started = monitoring.startMonitoring(
                userId, 
                session.session_id,
                checkNewOrders,
                config.INTERVAL_UPDATES
            );
            if (started) {
                await checkNewOrders(userId, session.session_id);
                await ctx.reply('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤–∫–ª—é—á–µ–Ω', 
                    keyboards.getMainKeyboard(true));
            }
            return;

        case 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥':
            if (monitoring.stopMonitoring(userId)) {
                await ctx.reply('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω', 
                    keyboards.getMainKeyboard(false));
            } else {
                await ctx.reply('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω', 
                    keyboards.getMainKeyboard(false));
            }
            return;

        case 'üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç':
            if (!session?.session_id) {
                return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
            }
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "9.30-21.00":');
            await db.saveSession(userId, {
                ...session,
                step: config.STEPS.AWAITING_WORK_TIME
            });
            return;

        case 'üö™ –í—ã–π—Ç–∏':
            const logoutUserId = ctx.from.id;
            const logoutSession = await db.getSession(logoutUserId);
            
            if (logoutSession) {
                monitoring.stopMonitoring(logoutUserId);
                await db.deleteSession(logoutUserId);
                await ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', keyboards.getLoginKeyboard);
            } else {
                await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
            }
            return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    if (session?.step === config.STEPS.AWAITING_DATE) {
        if (/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {
            await showRoutes(ctx, text);
            await db.saveSession(ctx.from.id, {
                ...session,
                step: session.session_id ? config.STEPS.AUTHENTICATED : config.STEPS.CLIENT_CODE
            });
        } else {
            await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì', 
                keyboards.getMainKeyboard(isMonitoringActive));
        }
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    if (session?.step === config.STEPS.AWAITING_WORK_TIME) {
        const timeRegex = /^\d{1,2}\.\d{2}-\d{1,2}\.\d{2}$/;
        if (!timeRegex.test(text)) {
            return await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç "9.30-21.00"');
        }
    
        try {
            const currentDate = new Date().toLocaleDateString('ru-RU');
            const workHours = calculateWorkHours(text);
            const driverSurname = getDriverSurname(session.driver_name);
    
            const reportMessage = 
                `üìã –û—Ç—á–µ—Ç –∑–∞ ${currentDate}\n\n` +
                `üë§ ${driverSurname}\n` +
                `üïí ${text} (${workHours.toFixed(1)} —á.)`;
    
            await ctx.reply(reportMessage, keyboards.getMainKeyboard(monitoring.isMonitoringActive(userId)));
            
            await db.saveSession(userId, {
                ...session,
                step: config.STEPS.AUTHENTICATED
            });
        } catch (error) {
            console.error('Error creating report:', error);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞');
        }
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (session?.step) {
        switch (session.step) {
            case config.STEPS.CLIENT_CODE:
                await db.saveSession(userId, {
                    ...session,
                    client_code: text,
                    step: config.STEPS.LOGIN
                });
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ Login:');
                break;

            case config.STEPS.LOGIN:
                await db.saveSession(userId, {
                    ...session,
                    login: text,
                    step: config.STEPS.PASSWORD
                });
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ Password:');
                break;

            case config.STEPS.PASSWORD:
                try {
                    const response = await api.authenticate(
                        session.client_code,
                        session.login,
                        text
                    );

                    if (response.TL_Mobile_LoginResponse.ErrorDescription) {
                        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.TL_Mobile_LoginResponse.ErrorDescription}`, 
                            keyboards.getLoginKeyboard);
                        await db.deleteSession(userId);
                    } else {
                        await db.saveSession(userId, {
                            ...session,
                            password: text,
                            session_id: response.TL_Mobile_LoginResponse.SessionId,
                            driver_name: response.TL_Mobile_LoginResponse.DriverName,
                            step: config.STEPS.AUTHENTICATED
                        });
                        await ctx.reply('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 
                            keyboards.getMainKeyboard(false));
                    }
                } catch (error) {
                    console.error('Authentication error:', error);
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', keyboards.getLoginKeyboard);
                    await db.deleteSession(userId);
                }
                break;
        }
    } else {
        await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 
            keyboards.getLoginKeyboard);
    }
});

bot.launch();

process.once('SIGINT', () => {
    bot.stop('SIGINT');
    db.close();
});

process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});