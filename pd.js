const { Telegraf } = require('telegraf');
const config = require('./config');
const db = require('./database');
const api = require('./api');
const keyboards = require('./keyboards');
const monitoring = require('./monitoring');

const bot = new Telegraf(config.TELEGRAM_TOKEN);

const ORDER_STATES = {
    '51e45c11-d5c7-4383-8fc4-a2e2e1781230': '–û—Ç–º–µ–Ω—ë–Ω',
    'dfab6563-55b8-475d-aac5-01b6705265cd': '–ù–æ–≤—ã–π',
    '8b176fdd-4718-46eb-b4f6-1cf487e5353b': '–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è',
    'b107b2e5-fe96-46ec-9c1d-7248d77e8383': '–í—ã–ø–æ–ª–Ω–µ–Ω (—Å–∞–π—Ç)',
    'ceb8edd8-a0d9-4116-a8ee-a6c0be89103b': '–í—ã–ø–æ–ª–Ω–µ–Ω (–Ω–∞–ª)',
    'd4535403-e4f6-4888-859e-098b7829b3a6': '–í—ã–ø–æ–ª–Ω–µ–Ω (–±–µ–∑–Ω–∞–ª)',
    '01c157f5-ec6a-47b6-a655-981489e6022a': '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω',
    '3e3d9e5d-b04a-4950-97f5-f6060b5362b6': '–í –º–∞—à–∏–Ω–µ',
    'e11e0bf2-4e34-4789-bdb6-b6c284f93bbf': '–ß–∞—Å—Ç–∏—á–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
    '50b9348e-1da1-44e3-b84b-88b68da829a4': '–û—Ç–ª–æ–∂–µ–Ω'
};

function getOrderStatusName(statusId) {
    return ORDER_STATES[statusId] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å';
}

async function checkNewOrders(userId, sessionId) {
    try {
        const session = await db.getSession(userId);
        const credentials = {
            clientCode: session.client_code,
            login: session.login,
            password: session.password
        };

        const currentDate = new Date().toLocaleDateString('ru-RU');
        const result = await api.getRoutes(sessionId, currentDate, credentials);

        if (result.sessionUpdated) {
            session.session_id = result.newSessionId;
            await db.saveSession(userId, session);
            sessionId = result.newSessionId;
        }

        const response = result.data;
        if (!response?.TL_Mobile_EnumRoutesResponse?.Routes) return;

        const routes = response.TL_Mobile_EnumRoutesResponse.Routes;
        const currentOrders = new Set(
            routes.flatMap(route => route.Orders?.map(order => order.ExternalId) || [])
        );

        const previousOrders = monitoring.getLastKnownOrders(userId);
        const newOrders = [...currentOrders].filter(order => !previousOrders.has(order));

        if (newOrders.length) {
            for (const route of routes) {
                const routeOrders = route.Orders?.map(order => order.ExternalId) || [];
                const hasNewOrders = routeOrders.some(orderId => newOrders.includes(orderId));

                if (hasNewOrders) {
                    const detailsResult = await api.getRouteDetails(sessionId, [route.Id], credentials);
                    
                    if (detailsResult.sessionUpdated) {
                        session.session_id = detailsResult.newSessionId;
                        await db.saveSession(userId, session);
                        sessionId = detailsResult.newSessionId;
                    }

                    const routeDetails = detailsResult.data.TL_Mobile_GetRoutesResponse.Routes[0];

                    // –ü–æ–ª—É—á–∞–µ–º orderIds –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                    const orderIds = routeDetails.Points.flatMap(point => 
                        point.Orders?.map(order => order.Id) || []
                    ).filter(id => id);

                    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö
                    const orderDetailsResult = await api.getOrderDetails(sessionId, orderIds, credentials);
                    if (orderDetailsResult.sessionUpdated) {
                        session.session_id = orderDetailsResult.newSessionId;
                        await db.saveSession(userId, session);
                        sessionId = orderDetailsResult.newSessionId;
                    }

                    const orders = orderDetailsResult.data.TL_Mobile_GetOrdersResponse.Orders;

                    let messageText = `üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –≤ –º–∞—Ä—à—Ä—É—Ç–µ ${routeDetails.Number}:\n\n`;

                    for (let i = 1; i < routeDetails.Points.length; i++) {
                        const point = routeDetails.Points[i];
                        const pointOrder = point.Orders?.[0];

                        if (pointOrder && newOrders.includes(pointOrder.ExternalId)) {
                            const orderDetails = orders.find(o => o.Id === pointOrder.Id);

                            messageText += `üì¶ –ó–∞–∫–∞–∑: ${pointOrder.ExternalId}\n`;
                            messageText += `üìç –ê–¥—Ä–µ—Å: ${point.Address}\n`;
                            
                            if (point.Description) {
                                messageText += `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${point.Description}\n`;
                            }

                            if (orderDetails?.To?.ContactPhone) {
                                messageText += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${orderDetails.To.ContactPhone}\n`;
                            }

                            if (point.Weight) {
                                messageText += `‚öñÔ∏è –í–µ—Å: ${point.Weight} ${routeDetails.WeightUnit}\n`;
                            }

                            if (orderDetails?.InvoiceTotal) {
                                messageText += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${orderDetails.InvoiceTotal} —Ä—É–±.\n`;
                            }

                            if (orderDetails?.Comment) {
                                messageText += `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderDetails.Comment}\n`;
                            }

                            if(orderDetails?.To?. StartTime && orderDetails?.To?.EndTime){
                                const startTime = new Date(orderDetails.To.StartTime).toLocaleTimeString('ru-RU', {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                });
                                const endTime = new Date(orderDetails.To.EndTime).toLocaleTimeString('ru-RU', {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                });
                                messageText += `‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ: ${startTime} - ${endTime}\n`;
                            }

                            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º –æ–∫–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                            if (orderDetails?.To?.StartTime && orderDetails?.To?.EndTime) {
                                const startTime = new Date(orderDetails.To.StartTime).toLocaleTimeString('ru-RU', {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                });
                                const endTime = new Date(orderDetails.To.EndTime).toLocaleTimeString('ru-RU', {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                });
                                messageText += `‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ: ${startTime} - ${endTime}\n`;
                            }

                            messageText += `\n`;
                        }
                    }

                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ä—à—Ä—É—Ç–µ
                    messageText += `üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–µ:\n`;
                    messageText += `üöö –ù–æ–º–µ—Ä –º–∞—Ä—à—Ä—É—Ç–∞: ${routeDetails.Number}\n`;
                    if (routeDetails.Distance) {
                        messageText += `üìè –î–∏—Å—Ç–∞–Ω—Ü–∏—è: ${routeDetails.Distance} –∫–º\n`;
                    }
                    messageText += `üì¶ –í—Å–µ–≥–æ —Ç–æ—á–µ–∫ –≤ –º–∞—Ä—à—Ä—É—Ç–µ: ${routeDetails.Points.length - 1}\n`;

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª–∏–Ω—ã
                    if (messageText.length > config.MAX_MESSAGE_LENGTH) {
                        for (let i = 0; i < messageText.length; i += config.MAX_MESSAGE_LENGTH) {
                            await bot.telegram.sendMessage(userId, 
                                messageText.slice(i, i + config.MAX_MESSAGE_LENGTH));
                        }
                    } else {
                        await bot.telegram.sendMessage(userId, messageText);
                    }
                }
            }
        }

        monitoring.updateLastKnownOrders(userId, currentOrders);

    } catch (error) {
        console.error('Error checking orders:', error);
        
        if (error.isSessionExpired) {
            const session = await db.getSession(userId);
            const credentials = {
                clientCode: session.client_code,
                login: session.login,
                password: session.password
            };

            try {
                const authResponse = await api.refreshSession(credentials);
                session.session_id = authResponse;
                await db.saveSession(userId, session);
                await checkNewOrders(userId, authResponse);
            } catch (refreshError) {
                console.error('Session refresh error:', refreshError);
                await bot.telegram.sendMessage(userId, 
                    '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start');
                monitoring.stopMonitoring(userId);
            }
        }
    }
}

async function showRoutes(ctx, date) {
    try {
        const session = await db.getSession(ctx.from.id);
        if (!session?.session_id) {
            return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
        }

        const credentials = {
            clientCode: session.client_code,
            login: session.login,
            password: session.password
        };

        const result = await api.getRoutes(session.session_id, date, credentials);

        if (result.sessionUpdated) {
            session.session_id = result.newSessionId;
            await db.saveSession(ctx.from.id, session);
        }

        const response = result.data;

        if (!response?.TL_Mobile_EnumRoutesResponse?.Routes) {
            return await ctx.reply(`üì≠ –ú–∞—Ä—à—Ä—É—Ç—ã –Ω–∞ ${date} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`, 
                keyboards.getMainKeyboard(monitoring.isMonitoringActive(ctx.from.id)));
        }

        const routes = response.TL_Mobile_EnumRoutesResponse.Routes;
        const totalOrders = routes.reduce((sum, route) => {
            if (route.Orders && Array.isArray(route.Orders)) {
                return sum + route.Orders.length;
            }
            return sum;
        }, 0);

        if (totalOrders === 0) {
            return await ctx.reply(`üì≠ –ù–∞ ${date} –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç`, 
                keyboards.getMainKeyboard(monitoring.isMonitoringActive(ctx.from.id)));
        }

        let totalCashAmount = 0;
        let totalNonCashAmount = 0;

        for (const route of routes) {
            const detailsResult = await api.getRouteDetails(session.session_id, [route.Id], credentials);
            
            if (detailsResult.sessionUpdated) {
                session.session_id = detailsResult.newSessionId;
                await db.saveSession(ctx.from.id, session);
            }

            const routeDetails = detailsResult.data.TL_Mobile_GetRoutesResponse.Routes[0];
            const orderIds = routeDetails.Points.flatMap(point => 
                point.Orders?.map(order => order.Id) || []
            ).filter(id => id);

            const orderDetailsResult = await api.getOrderDetails(session.session_id, orderIds, credentials);
            if (orderDetailsResult.sessionUpdated) {
                session.session_id = orderDetailsResult.newSessionId;
                await db.saveSession(ctx.from.id, session);
            }

            const orders = orderDetailsResult.data.TL_Mobile_GetOrdersResponse.Orders;
            let routeCashAmount = 0;
            let routeNonCashAmount = 0;
            
            let messageText = `üöö –ú–∞—Ä—à—Ä—É—Ç ${routes.indexOf(route) + 1}\n`;
            messageText += `üìù –ù–æ–º–µ—Ä: ${routeDetails.Number}\n`;
            messageText += `üì¶ –í—Å–µ–≥–æ —Ç–æ—á–µ–∫: ${routeDetails.Points.length - 1}\n\n`;

            for (let i = 1; i < routeDetails.Points.length; i++) {
                const point = routeDetails.Points[i];
                messageText += `üìç –¢–æ—á–∫–∞ ${point.Label}:\n`;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Orders –∏ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
                if (point.Orders && point.Orders.length > 0 && point.Orders[0].ExternalId) {
                    messageText += `üîπ –ó–∞–∫–∞–∑: ${point.Orders[0].ExternalId}\n`;
                }
                
                messageText += `üìÆ –ê–¥—Ä–µ—Å: ${point.Address}\n`;
                
                if (point.Description) {
                    messageText += `üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: ${point.Description}\n`;
                }

                if (point.Orders && point.Orders.length > 0) {
                    const orderDetails = orders.find(o => o.Id === point.Orders[0].Id);
                    
                    if (point.Weight) {
                        messageText += `‚öñÔ∏è –í–µ—Å: ${point.Weight} ${routeDetails.WeightUnit}\n`;
                    }
                    
                    if (orderDetails) {
                        if (orderDetails.CustomState) {
                            messageText += `üìä –°—Ç–∞—Ç—É—Å: ${getOrderStatusName(orderDetails.CustomState)}\n`;
                            
                            if (orderDetails.InvoiceTotal) {
                                const amount = parseFloat(orderDetails.InvoiceTotal);
                                
                                if (orderDetails.CustomState === 'ceb8edd8-a0d9-4116-a8ee-a6c0be89103b') {
                                    routeCashAmount += amount;
                                    totalCashAmount += amount;
                                } else if (orderDetails.CustomState === 'd4535403-e4f6-4888-859e-098b7829b3a6') {
                                    routeNonCashAmount += amount;
                                    totalNonCashAmount += amount;
                                }
                            }
                        }

                        if (orderDetails.InvoiceTotal) {
                            messageText += `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${orderDetails.InvoiceTotal} —Ä—É–±.\n`;
                        }

                        if (orderDetails.Comment) {
                            messageText += `üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${orderDetails.Comment}\n`;
                        }

                        if (orderDetails.To?.ContactPhone) {
                            messageText += `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${orderDetails.To.ContactPhone}\n`;
                        }

                        if (orderDetails.To?.StartTime && orderDetails.To?.EndTime) {
                            const startTime = new Date(orderDetails.To.StartTime).toLocaleTimeString('ru-RU', {
                                hour: '2-digit',
                                minute: '2-digit'
                            });
                            const endTime = new Date(orderDetails.To.EndTime).toLocaleTimeString('ru-RU', {
                                hour: '2-digit',
                                minute: '2-digit'
                            });
                            messageText += `‚è∞ –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ: ${startTime} - ${endTime}\n`;
                        }
                    }
                }
                messageText += `\n`;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –º–∞—Ä—à—Ä—É—Ç—É
            const routeTotalAmount = routeCashAmount + routeNonCashAmount;
            if (routeTotalAmount > 0) {
                messageText += `üí∞ –§–∏–Ω–∞–Ω—Å—ã –ø–æ –º–∞—Ä—à—Ä—É—Ç—É:\n`;
                if (routeCashAmount > 0) {
                    messageText += `‚îú üíµ –ù–∞–ª–∏—á–Ω—ã–µ: ${routeCashAmount.toFixed(2)} —Ä—É–±.\n`;
                }
                if (routeNonCashAmount > 0) {
                    messageText += `‚îú üí≥ –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ: ${routeNonCashAmount.toFixed(2)} —Ä—É–±.\n`;
                }
                messageText += `‚îî üìà –í—Å–µ–≥–æ: ${routeTotalAmount.toFixed(2)} —Ä—É–±.\n`;
            }

            if (messageText.length > config.MAX_MESSAGE_LENGTH) {
                for (let i = 0; i < messageText.length; i += config.MAX_MESSAGE_LENGTH) {
                    await ctx.reply(messageText.slice(i, i + config.MAX_MESSAGE_LENGTH));
                }
            } else {
                await ctx.reply(messageText);
            }
        }

        // –ü–æ–¥—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—É–º–º—ã
        const totalAmount = totalCashAmount + totalNonCashAmount;

        const statsMessage = `üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
            `üí∞ –§–∏–Ω–∞–Ω—Å—ã:\n` +
            `‚îú üíµ –ù–∞–ª–∏—á–Ω—ã–µ: ${totalCashAmount.toFixed(2)} —Ä—É–±.\n` +
            `‚îú üí≥ –ë–µ–∑–Ω–∞–ª–∏—á–Ω—ã–µ: ${totalNonCashAmount.toFixed(2)} —Ä—É–±.\n` +
            `‚îî üìà –í—Å–µ–≥–æ: ${totalAmount.toFixed(2)} —Ä—É–±.\n\n` +
            `üì¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ä—à—Ä—É—Ç–∞—Ö:\n` +
            `‚îú üöö –í—Å–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤: ${routes.length}\n` +
            `‚îî üìã –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${totalOrders}`;

        await ctx.reply(statsMessage, 
            keyboards.getMainKeyboard(monitoring.isMonitoringActive(ctx.from.id)));

    } catch (error) {
        console.error('Error showing routes:', error);
        
        if (error.isSessionExpired) {
            const session = await db.getSession(ctx.from.id);
            const credentials = {
                clientCode: session.client_code,
                login: session.login,
                password: session.password
            };

            try {
                const authResponse = await api.refreshSession(credentials);
                session.session_id = authResponse;
                await db.saveSession(ctx.from.id, session);
                await showRoutes(ctx, date);
            } catch (refreshError) {
                console.error('Session refresh error:', refreshError);
                await ctx.reply('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start');
            }
        } else {
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤');
        }
    }
}

function calculateWorkHours(timeRange) {
    const [start, end] = timeRange.split('-');
    const [startHours, startMinutes] = start.split('.').map(Number);
    const [endHours, endMinutes] = end.split('.').map(Number);
    
    let hours = endHours - startHours;
    let minutes = endMinutes - startMinutes;
    
    if (minutes < 0) {
        hours--;
        minutes += 60;
    }
    
    return hours + (minutes / 60);
}

function getDriverSurname(driverName) {
    return driverName.split(' ')[0];
}

// –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
bot.command('start', async (ctx) => {
    const session = await db.getSession(ctx.from.id);
    const isMonitoringActive = monitoring.isMonitoringActive(ctx.from.id);

    if (session?.session_id) {
        await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', keyboards.getMainKeyboard(isMonitoringActive));
    } else {
        await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–í–æ–π—Ç–∏" –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã:', 
            keyboards.getLoginKeyboard);
    }
});

bot.command('login', async (ctx) => {
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ ClientCode:');
    await db.saveSession(ctx.from.id, {
        user_id: ctx.from.id,
        client_code: null,
        login: null,
        password: null,
        session_id: null,
        driver_name: null,
        step: config.STEPS.CLIENT_CODE
    });
});

bot.command('status', async (ctx) => {
    const session = await db.getSession(ctx.from.id);
    const isMonitoringActive = monitoring.isMonitoringActive(ctx.from.id);

    if (!session?.session_id) {
        return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
    }

    const statusMessage = `–°—Ç–∞—Ç—É—Å: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n` +
        `–ö–ª–∏–µ–Ω—Ç: ${session.client_code}\n` +
        `–õ–æ–≥–∏–Ω: ${session.login}\n` +
        `–í–æ–¥–∏—Ç–µ–ª—å: ${session.driver_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
        `–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${isMonitoringActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}`;

    await ctx.reply(statusMessage, keyboards.getMainKeyboard(isMonitoringActive));
});

bot.command('logout', async (ctx) => {
    const userId = ctx.from.id;
    const session = await db.getSession(userId);
    
    if (session) {
        monitoring.stopMonitoring(userId);
        await db.deleteSession(userId);
        await ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', keyboards.getLoginKeyboard);
    } else {
        await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏
bot.action('routes_today', async (ctx) => {
    const currentDate = new Date().toLocaleDateString('ru-RU');
    await showRoutes(ctx, currentDate);
});

bot.action('routes_select_date', async (ctx) => {
    const session = await db.getSession(ctx.from.id);
    if (!session?.session_id) {
        return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
    }

    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì (–Ω–∞–ø—Ä–∏–º–µ—Ä, 09.02.2024):', 
        keyboards.getMainKeyboard(monitoring.isMonitoringActive(ctx.from.id)));
    
    await db.saveSession(ctx.from.id, {
        ...session,
        step: config.STEPS.AWAITING_DATE
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('text', async (ctx) => {
    const text = ctx.message.text;
    const userId = ctx.from.id;
    const session = await db.getSession(userId);
    const isMonitoringActive = monitoring.isMonitoringActive(userId);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    switch (text) {
        case 'üîë –í–æ–π—Ç–∏':
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ ClientCode:');
            await db.saveSession(userId, {
                user_id: userId,
                client_code: null,
                login: null,
                password: null,
                session_id: null,
                driver_name: null,
                step: config.STEPS.CLIENT_CODE
            });
            return;

        case 'üìä –ú–∞—Ä—à—Ä—É—Ç—ã':
            if (!session?.session_id) {
                return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
            }
            await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤:', keyboards.getRoutesKeyboard);
            return;

        case 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
            const statusSession = await db.getSession(ctx.from.id);
            const statusMonitoringActive = monitoring.isMonitoringActive(ctx.from.id);
        
            if (!statusSession?.session_id) {
                return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã');
            }
        
            const statusMessage = `–°—Ç–∞—Ç—É—Å: –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω\n` +
                `–ö–ª–∏–µ–Ω—Ç: ${statusSession.client_code}\n` +
                `–õ–æ–≥–∏–Ω: ${statusSession.login}\n` +
                `–í–æ–¥–∏—Ç–µ–ª—å: ${statusSession.driver_name || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
                `–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: ${statusMonitoringActive ? '‚úÖ –ê–∫—Ç–∏–≤–µ–Ω' : '‚ùå –ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}`;
        
            await ctx.reply(statusMessage, keyboards.getMainKeyboard(statusMonitoringActive));
            return;

        case 'üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥':
            if (!session?.session_id) {
                return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
            }
            if (isMonitoringActive) {
                return await ctx.reply('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!', 
                    keyboards.getMainKeyboard(true));
            }
            const started = monitoring.startMonitoring(
                userId, 
                session.session_id,
                checkNewOrders,
                config.INTERVAL_UPDATES
            );
            if (started) {
                await checkNewOrders(userId, session.session_id);
                await ctx.reply('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤–∫–ª—é—á–µ–Ω', 
                    keyboards.getMainKeyboard(true));
            }
            return;

        case 'üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥':
            if (monitoring.stopMonitoring(userId)) {
                await ctx.reply('‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Ç–∫–ª—é—á–µ–Ω', 
                    keyboards.getMainKeyboard(false));
            } else {
                await ctx.reply('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω', 
                    keyboards.getMainKeyboard(false));
            }
            return;

        case 'üìù –°–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç':
            if (!session?.session_id) {
                return await ctx.reply('–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
            }
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "9.30-21.00":');
            await db.saveSession(userId, {
                ...session,
                step: config.STEPS.AWAITING_WORK_TIME
            });
            return;

        case 'üö™ –í—ã–π—Ç–∏':
            const logoutUserId = ctx.from.id;
            const logoutSession = await db.getSession(logoutUserId);
            
            if (logoutSession) {
                monitoring.stopMonitoring(logoutUserId);
                await db.deleteSession(logoutUserId);
                await ctx.reply('‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', keyboards.getLoginKeyboard);
            } else {
                await ctx.reply('‚ö†Ô∏è –í—ã –Ω–µ –±—ã–ª–∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã', keyboards.getLoginKeyboard);
            }
            return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
    if (session?.step === config.STEPS.AWAITING_DATE) {
        if (/^\d{2}\.\d{2}\.\d{4}$/.test(text)) {
            await showRoutes(ctx, text);
            await db.saveSession(ctx.from.id, {
                ...session,
                step: session.session_id ? config.STEPS.AUTHENTICATED : config.STEPS.CLIENT_CODE
            });
        } else {
            await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì', 
                keyboards.getMainKeyboard(isMonitoringActive));
        }
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    if (session?.step === config.STEPS.AWAITING_WORK_TIME) {
        const timeRegex = /^\d{1,2}\.\d{2}-\d{1,2}\.\d{2}$/;
        if (!timeRegex.test(text)) {
            return await ctx.reply('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç "9.30-21.00"');
        }
    
        try {
            const currentDate = new Date().toLocaleDateString('ru-RU');
            const workHours = calculateWorkHours(text);
            const driverSurname = getDriverSurname(session.driver_name);
    
            const reportMessage = 
                `üìã ${currentDate}\n` +
                `üë§ ${driverSurname}\n` +
                `üïí ${text} (${workHours.toFixed(1)} —á.)`;
    
            await ctx.reply(reportMessage, keyboards.getMainKeyboard(monitoring.isMonitoringActive(userId)));
            
            await db.saveSession(userId, {
                ...session,
                step: config.STEPS.AUTHENTICATED
            });
        } catch (error) {
            console.error('Error creating report:', error);
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞');
        }
        return;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (session?.step) {
        switch (session.step) {
            case config.STEPS.CLIENT_CODE:
                await db.saveSession(userId, {
                    ...session,
                    client_code: text,
                    step: config.STEPS.LOGIN
                });
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ Login:');
                break;

            case config.STEPS.LOGIN:
                await db.saveSession(userId, {
                    ...session,
                    login: text,
                    step: config.STEPS.PASSWORD
                });
                await ctx.reply('–í–≤–µ–¥–∏—Ç–µ Password:');
                break;

            case config.STEPS.PASSWORD:
                try {
                    const response = await api.authenticate(
                        session.client_code,
                        session.login,
                        text
                    );

                    if (response.TL_Mobile_LoginResponse.ErrorDescription) {
                        await ctx.reply(`‚ùå –û—à–∏–±–∫–∞: ${response.TL_Mobile_LoginResponse.ErrorDescription}`, 
                            keyboards.getLoginKeyboard);
                        await db.deleteSession(userId);
                    } else {
                        await db.saveSession(userId, {
                            ...session,
                            password: text,
                            session_id: response.TL_Mobile_LoginResponse.SessionId,
                            driver_name: response.TL_Mobile_LoginResponse.DriverName,
                            step: config.STEPS.AUTHENTICATED
                        });
                        await ctx.reply('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!', 
                            keyboards.getMainKeyboard(false));
                    }
                } catch (error) {
                    console.error('Authentication error:', error);
                    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', keyboards.getLoginKeyboard);
                    await db.deleteSession(userId);
                }
                break;
        }
    } else {
        await ctx.reply('–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', 
            keyboards.getLoginKeyboard);
    }
});

bot.launch();

process.once('SIGINT', () => {
    bot.stop('SIGINT');
    db.close();
});

process.on('uncaughtException', (error) => {
    console.error('Uncaught Exception:', error);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('Unhandled Rejection at:', promise, 'reason:', reason);
});